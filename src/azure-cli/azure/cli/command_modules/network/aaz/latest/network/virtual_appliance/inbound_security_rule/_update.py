# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "network virtual-appliance inbound-security-rule update",
)
class Update(AAZCommand):
    """Update the specified Network Virtual Appliance Inbound Security Rules.
    """

    _aaz_info = {
        "version": "2024-01-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/networkvirtualappliances/{}/inboundsecurityrules/{}", "2024-01-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.nva_name = AAZStrArg(
            options=["--nva-name"],
            help="The name of the Network Virtual Appliance.",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.rule_collection_name = AAZStrArg(
            options=["-n", "--name", "--rule-collection-name"],
            help="The name of security rule collection.",
            required=True,
            id_part="child_name_1",
        )

        # define Arg Group "Parameters"

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.rule_type = AAZStrArg(
            options=["--rule-type"],
            arg_group="Properties",
            help="Rule Type. This should be either AutoExpire or Permanent. Auto Expire Rule only creates NSG rules. Permanent Rule creates NSG rule and SLB LB Rule.",
            nullable=True,
            enum={"AutoExpire": "AutoExpire", "Permanent": "Permanent"},
        )
        _args_schema.rules = AAZListArg(
            options=["--rules"],
            arg_group="Properties",
            help="List of allowed rules.",
            nullable=True,
        )

        rules = cls._args_schema.rules
        rules.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.rules.Element
        _element.applies_on = AAZListArg(
            options=["applies-on"],
            help="Public IP name in case of Permanent Rule type & Interface Name in case of Auto Expire Rule type",
            nullable=True,
        )
        _element.destination_port_range = AAZIntArg(
            options=["destination-port-range"],
            help="NVA port ranges to be opened up. One needs to provide specific ports.",
            nullable=True,
            fmt=AAZIntArgFormat(
                maximum=65535,
                minimum=0,
            ),
        )
        _element.destination_port_ranges = AAZListArg(
            options=["destination-port-ranges"],
            help="NVA port ranges to be opened up. One can provide a range of ports. Allowed port value between 0 and 65535.",
            nullable=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Name of the rule.",
            nullable=True,
        )
        _element.protocol = AAZStrArg(
            options=["protocol"],
            help="Protocol. This should be either TCP or UDP.",
            nullable=True,
            enum={"TCP": "TCP", "UDP": "UDP"},
        )
        _element.source_address_prefix = AAZStrArg(
            options=["source-address-prefix"],
            help="The CIDR or source IP range.",
            nullable=True,
        )

        applies_on = cls._args_schema.rules.Element.applies_on
        applies_on.Element = AAZStrArg(
            nullable=True,
        )

        destination_port_ranges = cls._args_schema.rules.Element.destination_port_ranges
        destination_port_ranges.Element = AAZStrArg(
            nullable=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.InboundSecurityRuleGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.InboundSecurityRuleCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class InboundSecurityRuleGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkVirtualAppliances/{networkVirtualApplianceName}/inboundSecurityRules/{ruleCollectionName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkVirtualApplianceName", self.ctx.args.nva_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "ruleCollectionName", self.ctx.args.rule_collection_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-01-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_inbound_security_rule_read(cls._schema_on_200)

            return cls._schema_on_200

    class InboundSecurityRuleCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/networkVirtualAppliances/{networkVirtualApplianceName}/inboundSecurityRules/{ruleCollectionName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkVirtualApplianceName", self.ctx.args.nva_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "ruleCollectionName", self.ctx.args.rule_collection_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-01-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_inbound_security_rule_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("name", AAZStrType, ".rule_collection_name")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("ruleType", AAZStrType, ".rule_type")
                properties.set_prop("rules", AAZListType, ".rules")

            rules = _builder.get(".properties.rules")
            if rules is not None:
                rules.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.rules[]")
            if _elements is not None:
                _elements.set_prop("appliesOn", AAZListType, ".applies_on")
                _elements.set_prop("destinationPortRange", AAZIntType, ".destination_port_range")
                _elements.set_prop("destinationPortRanges", AAZListType, ".destination_port_ranges")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("protocol", AAZStrType, ".protocol")
                _elements.set_prop("sourceAddressPrefix", AAZStrType, ".source_address_prefix")

            applies_on = _builder.get(".properties.rules[].appliesOn")
            if applies_on is not None:
                applies_on.set_elements(AAZStrType, ".")

            destination_port_ranges = _builder.get(".properties.rules[].destinationPortRanges")
            if destination_port_ranges is not None:
                destination_port_ranges.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    _schema_inbound_security_rule_read = None

    @classmethod
    def _build_schema_inbound_security_rule_read(cls, _schema):
        if cls._schema_inbound_security_rule_read is not None:
            _schema.etag = cls._schema_inbound_security_rule_read.etag
            _schema.id = cls._schema_inbound_security_rule_read.id
            _schema.name = cls._schema_inbound_security_rule_read.name
            _schema.properties = cls._schema_inbound_security_rule_read.properties
            _schema.type = cls._schema_inbound_security_rule_read.type
            return

        cls._schema_inbound_security_rule_read = _schema_inbound_security_rule_read = AAZObjectType()

        inbound_security_rule_read = _schema_inbound_security_rule_read
        inbound_security_rule_read.etag = AAZStrType(
            flags={"read_only": True},
        )
        inbound_security_rule_read.id = AAZStrType()
        inbound_security_rule_read.name = AAZStrType()
        inbound_security_rule_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        inbound_security_rule_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_inbound_security_rule_read.properties
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.rule_type = AAZStrType(
            serialized_name="ruleType",
        )
        properties.rules = AAZListType()

        rules = _schema_inbound_security_rule_read.properties.rules
        rules.Element = AAZObjectType()

        _element = _schema_inbound_security_rule_read.properties.rules.Element
        _element.applies_on = AAZListType(
            serialized_name="appliesOn",
        )
        _element.destination_port_range = AAZIntType(
            serialized_name="destinationPortRange",
        )
        _element.destination_port_ranges = AAZListType(
            serialized_name="destinationPortRanges",
        )
        _element.name = AAZStrType()
        _element.protocol = AAZStrType()
        _element.source_address_prefix = AAZStrType(
            serialized_name="sourceAddressPrefix",
        )

        applies_on = _schema_inbound_security_rule_read.properties.rules.Element.applies_on
        applies_on.Element = AAZStrType()

        destination_port_ranges = _schema_inbound_security_rule_read.properties.rules.Element.destination_port_ranges
        destination_port_ranges.Element = AAZStrType()

        _schema.etag = cls._schema_inbound_security_rule_read.etag
        _schema.id = cls._schema_inbound_security_rule_read.id
        _schema.name = cls._schema_inbound_security_rule_read.name
        _schema.properties = cls._schema_inbound_security_rule_read.properties
        _schema.type = cls._schema_inbound_security_rule_read.type


__all__ = ["Update"]
